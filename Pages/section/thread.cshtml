@page "/section/{sec}/{id:int}"
@model ThreadModel;
@using Microsoft.AspNetCore.Http;

<div class="threadHeader row">
	<div class="col">
		<h3 class="m-2 ser">@Model.thread.name</h3>
	</div>
	<div class="col text-right text-muted align-self-center">
		<p class="mb-0">@Model.thread.date</p>
	</div>
</div>
<div class="row">
	<div class="col-sm-2 text-center">
		<a href="/profile/@Model.thread.author.Username"><h5 class="mt-2" style="color:@Model.thread.author.Rank.color;">@Model.thread.author.Username</h5></a>
		<small>@Model.thread.author.Rank.name</small><br>
		<img class="avatar mb-3" src="~/images/avatars/@Model.thread.author.avatar">
		<p>Posts: @Model.thread.author.posts</p>
	</div>
	<div class="col pl-0">
		<p class="mt-2">@Html.Raw(Model.thread.post)</p>
	</div>
</div>
@foreach(var p in Model.posts)
{
	<div class="post row">
		<div class="col-sm-2 text-center">
			<a href="/profile/@p.author.Username"><h5 class="mt-2" style="color:@p.author.Rank.color;">@p.author.Username</h5></a>
			<small>@p.author.Rank.name</small><br>
			<img class="avatar mb-3" src="~/images/avatars/@p.author.avatar">
			<p>Posts: @p.author.posts</p>
		</div>
		<div class="col">
			<div class="row">
				<div class="col postfield">
					<p class="mt-2">@Html.Raw(p.post)</p>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-sm-2">
		</div>
		<div class="col text-muted">
			<small>@p.date</small>
		</div>
	</div>
}
<div class="row">
		<div class="col">
			@{
				var user = new Byte[20];
				var exists = HttpContext.Session.TryGetValue("username", out user);

				if(exists) {
					<form method="post" id="postform">
						<div id="editor-container" style="height: 300px">
							
						</div>
						<input name="author" style="display:none" value="@HttpContext.Session.GetString("username")">
						<textarea name="text" style="display:none" id="hiddenArea"></textarea>
						<input name="thread" style="display:none"/ value="@RouteData.Values["id"]">

						<button type="submit" class="btn btn-outline-light mt-3">Create Thread</button>
					</form>

 					<script src="https://unpkg.com/quill-image-uploader@1.2.1/dist/quill.imageUploader.min.js"></script>

					<script>
						Quill.register("modules/imageUploader", ImageUploader);

						let options = {
							modules: {
								toolbar: [
									[{ header: [1, 2, false] }],
									['bold', 'italic', 'underline'],
									['image', 'code-block']
								],
								// Default example, should update with await/async in the future
								imageUploader: {
									upload: file => {
										return new Promise((resolve, reject) => {
											const formData = new FormData();
											formData.append("image", file);

											fetch(
												"https://api.imgbb.com/1/upload?key=b98e506bd1b9d97bfdbc67cc99711a6b",
												{
												method: "POST",
												body: formData
												}
											)
											.then(response => response.json())
											.then(result => {
												console.log(result);
												resolve(result.data.url);
											})
											.catch(error => {
												reject("Upload failed");
												console.error("Error:", error);
											});
										});
									}
								}
							},
							theme: 'snow'  // or 'bubble'
						};

						var quill = new Quill('#editor-container', options);

						$("#postform").on("submit", function(){
							$("#hiddenArea").val($("#editor-container > .ql-editor").html());
						});
					</script>
				} else {
					<div class="text-center">
						<h3>You need you log in to make a post a reply</h3>
					</div>
				}
			}
		</div>
	</div>